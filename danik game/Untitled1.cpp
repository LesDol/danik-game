#include <SFML/Graphics.hpp>
#include <vector>

class Parallax {
private:
    std::vector<sf::Sprite> layers; // ???? ?????????
    std::vector<float> speeds; // ???????? ??? ??????? ????
    sf::RenderWindow& window; // ?????? ?? ???? ??? ?????????

public:
    Parallax(sf::RenderWindow& win) : window(win) {}

    void addLayer(const sf::Texture& texture, float speed) {
        sf::Sprite sprite(texture);
        layers.push_back(sprite);
        speeds.push_back(speed);
    }

    void update(float deltaTime, const sf::Vector2f& cameraPosition) {
        for (size_t i = 0; i < layers.size(); ++i) {
            // ????????? ??????? ???? ? ??????????? ?? ???????? ? ??????? ??????
            layers[i].setPosition(cameraPosition.x * speeds[i], cameraPosition.y);
        }
    }

    void draw() {
        for (const auto& layer : layers) {
            window.draw(layer);
        }
    }
};
int main() {
    sf::RenderWindow window(sf::VideoMode(800, 600), "Parallax Example");
    
    // ???????? ???????
    sf::Texture backgroundTexture;
    backgroundTexture.loadFromFile("background.png");
    
    sf::Texture middleTexture;
    middleTexture.loadFromFile("middle.png");
    
    sf::Texture foregroundTexture;
    foregroundTexture.loadFromFile("foreground.png");

    // ???????? ??????? ?????????
    Parallax parallax(window);
    parallax.addLayer(backgroundTexture, 0.5f); // ??????? ????
    parallax.addLayer(middleTexture, 1.0f); // ??????? ????
    parallax.addLayer(foregroundTexture, 1.5f); // ???????? ????

    sf::Vector2f cameraPosition(0, 0);

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        float deltaTime = 1; // ?????????? ??????? ????? ???????

        // ?????????? ??????? ?????? (????????, ?? ????? ????????????)
        cameraPosition.x += 1; // ????????? ?? ??? X

        parallax.update(deltaTime, cameraPosition);

        window.clear();
        parallax.draw();
        window.display();
    }

    return 0;
}
